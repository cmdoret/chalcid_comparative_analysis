}
####################################################
# Main
cl <- makeCluster(detectCores()-1)
#get library support needed to run the code
clusterEvalQ(cl,c(library(nlme),library(lme4)))
# Export variables and functions to all nodes in the cluster
clusterExport(cl,c("random_test","zval_model","data","n.genera","variable"))
# Simulations are shared among the nodes and the results are put together in the end.
#zval.reference <- replicate(nboot, zval_model(data, n.genera))
par(mfrow=c(3,2))
for(v in c("nbr_country","max_dist_eq","lat_mean","lat_median","host_spp")){
variable = v
start_time <- proc.time()[3]
clusterExport(cl,"variable")
fmla <- as.formula(paste(variable,"~ mode + (1|genus)",sep=" "))
if(v %in% c("nbr_country","host_spp")){
zval.reference <-parSapply(cl, 1:nboot, function(i,...){zval_model(data,n.genera,count=T)})
m_host <- glmer(fmla, data = data,family = "poisson")
st <- "z"
}
else{
zval.reference <-parSapply(cl, 1:nboot, function(i,...){zval_model(data,n.genera)})
m_host <- lmer(fmla, data = data)
st <- "t"
}
z.obs <- coef(summary(m_host))[2, paste0(st, " value")]
hist(main=paste0(variable, "\n","P-value = ",sum(z.obs>zval.reference)/nboot),zval.reference,
breaks = 100, xlim=c(min(c(zval.reference,z.obs)), max(c(zval.reference,z.obs)))) # Vector of nboot pvalues.
abline(v=z.obs, col="red", lwd=3)
print(paste0("P-value for ", variable, " is: ", sum(z.obs>zval.reference)/nboot))
print(paste0(nboot, " simulations for ", variable, " took", unname(proc.time()[3]-start_time), " seconds"))
}
stopCluster(cl)
#quantile(zval.reference,c(0.025, 0.975))
rm(list=ls()); library(permute); library(nlme); library(lme4);library(parallel)
data0 <- read.csv("~/Documents/Internship/Data/R_working_directory/auto/auto_processed_data.csv", header=T)
citat <-read.csv("~/Dropbox/Cyril-Casper_shared/Internship/Data/auto/auto_citations_per_species.csv", header=T)
citat <-read.csv("~/Dropbox/Cyril-Casper_shared/Internship_tidy/Data/auto", header=T)
citat <-read.csv("~/Dropbox/Cyril-Casper_shared/Internship_tidy/Data/auto/auto_citations_per_species.csv", header=T)
View(citat)
rm(list=ls()); library(permute); library(nlme); library(lme4);library(parallel)
data0 <- read.csv("~/Documents/Internship/Data/R_working_directory/auto/auto_processed_data.csv", header=T)
citat <-read.csv("~/Dropbox/Cyril-Casper_shared/Internship_tidy/Data/auto/auto_citations_per_species.csv", header=T)
data <- merge(x=data0, y=citat, by.x=c("family","genus","species"), by.y=c("family","genus","species"), all=F)
data <- data[!data$nbr_country =="0",] #remove species with no countries described
data <- data[!data$host_spp =="0",] # remove species with no hosts described
data2 <- data[data$ref>"2",] # remove species very few studies
data3 <- data[data$ref>"4",] # remove species very few studies
data4 <- data[data$ref>"7",] # remove species very few studies
data<-data3
rm(list=ls()); library(permute); library(nlme); library(lme4);library(parallel)
data0 <- read.csv("~/Documents/Internship/Data/R_working_directory/auto/auto_processed_data.csv", header=T)
citat <-read.csv("~/Dropbox/Cyril-Casper_shared/Internship_tidy/Data/auto/auto_citations_per_species.csv", header=T)
data <- merge(x=data0, y=citat, by.x=c("family","genus","species"), by.y=c("family","genus","species"), all=F)
data <- data[!data$nbr_country =="0",] #remove species with no countries described
data <- data[!data$host_spp =="0",] # remove species with no hosts described
data2 <- data[data$ref>"2",] # remove species very few studies
data3 <- data[data$ref>"4",] # remove species very few studies
data4 <- data[data$ref>"7",] # remove species very few studies
data<-data3
data$max_dist_eq <- pmax(abs(data$lat_min),abs(data$lat_max))
# for(c in 1:length(colnames(data))){
#   if(is.numeric(data[,c])){data[,c] <- abs(data[,c])}
# }
# par(mfrow=c(1,3))
# boxplot(data$ref[data$mode=="sex"], data$ref[data$mode=="asex"], ylim=c(0,10))
# boxplot(data2$ref[data2$mode=="sex"], data2$ref[data2$mode=="asex"], ylim=c(0,10))
# boxplot(data3$ref[data3$mode=="sex"], data3$ref[data3$mode=="asex"], ylim=c(0,10))
# boxplot(data4$ref[data4$mode=="sex"], data4$ref[data4$mode=="asex"], ylim=c(0,10))
#Choose a variable
variable="host_spp"
#fmla <- as.formula(paste(variable,"~ mode + (1|genus)",sep=" "))
#m_host <- glmer(fmla, data = data, family="poisson")
#z.obs <- coef(summary(m_host))[2, "t value"]
####################################################
# Ramdomize the mode (sex, asex) within a genus
n.genera <- length(levels(data$genus)) #number of genera
l.genus <- as.vector(table(data$genus)) #list w/ number of species per genus
nboot <- 10 #number of permutations
random_test <- function(x,y) {  #x: data, y:genus
genus_name <- subset(x, genus == y)$genus
species_name <- subset(x, genus == y)$species
var <- subset(x, genus == y)[,variable]
# Sample without replacement
random_mode <- sample(subset(x, genus == y)$mode)
# Return a partial data frame (for each genus)
return(data.frame(genus_name, species_name, var, random_mode))
}
####################################################
# For each genus, run the random_test() function.
zval_model <- function(data, n.genera, count=F){
# Complete data frame initialization.
ref.distri <- data.frame(x= character(0), y= character(0), z = character(0))
for (t in 1:n.genera) {
# Sub data frame (for each genus).
part_distri <- random_test(data, levels(data$genus)[t])
# Concatenation of each sub data frames.
ref.distri <- rbind(ref.distri, part_distri)
}
#print(ref.distri)
# Model
if(count){
m1 <- glmer(var ~ random_mode + (1|genus_name), data = ref.distri,family = "poisson")
st <- "z"
} else{
m1 <- lmer(var ~ random_mode + (1|genus_name), data = ref.distri)
st <- "t"
}
return(coef(summary(m1))[2, paste0(st," value")]) # Return zvalue
}
####################################################
# Main
cl <- makeCluster(detectCores()-1)
#get library support needed to run the code
clusterEvalQ(cl,c(library(nlme),library(lme4)))
# Export variables and functions to all nodes in the cluster
clusterExport(cl,c("random_test","zval_model","data","n.genera","variable"))
# Simulations are shared among the nodes and the results are put together in the end.
#zval.reference <- replicate(nboot, zval_model(data, n.genera))
par(mfrow=c(3,2))
for(v in c("nbr_country","max_dist_eq","lat_mean","lat_median","host_spp")){
variable = v
start_time <- proc.time()[3]
clusterExport(cl,"variable")
fmla <- as.formula(paste(variable,"~ mode + (1|genus)",sep=" "))
if(v %in% c("nbr_country","host_spp")){
zval.reference <-parSapply(cl, 1:nboot, function(i,...){zval_model(data,n.genera,count=T)})
m_host <- glmer(fmla, data = data,family = "poisson")
st <- "z"
}
else{
zval.reference <-parSapply(cl, 1:nboot, function(i,...){zval_model(data,n.genera)})
m_host <- lmer(fmla, data = data)
st <- "t"
}
z.obs <- coef(summary(m_host))[2, paste0(st, " value")]
hist(main=paste0(variable, "\n","P-value = ",sum(z.obs>zval.reference)/nboot),zval.reference,
breaks = 100, xlim=c(min(c(zval.reference,z.obs)), max(c(zval.reference,z.obs)))) # Vector of nboot pvalues.
abline(v=z.obs, col="red", lwd=3)
print(paste0("P-value for ", variable, " is: ", sum(z.obs>zval.reference)/nboot))
print(paste0(nboot, " simulations for ", variable, " took", unname(proc.time()[3]-start_time), " seconds"))
}
stopCluster(cl)
#quantile(zval.reference,c(0.025, 0.975))
rm(list=ls()); library(permute); library(nlme); library(lme4);library(parallel)
data0 <- read.csv("~/Documents/Internship/Data/R_working_directory/auto/auto_processed_data.csv", header=T)
citat <-read.csv("~/Dropbox/Cyril-Casper_shared/Internship_tidy/Data/auto/auto_citations_per_species.csv", header=T)
data <- merge(x=data0, y=citat, by.x=c("family","genus","species"), by.y=c("family","genus","species"), all=F)
data <- data[!data$nbr_country =="0",] #remove species with no countries described
data <- data[!data$host_spp =="0",] # remove species with no hosts described
data2 <- data[data$ref>"2",] # remove species very few studies
data3 <- data[data$ref>"4",] # remove species very few studies
data4 <- data[data$ref>"7",] # remove species very few studies
data<-data3
data$max_dist_eq <- pmax(abs(data$lat_min),abs(data$lat_max))
# for(c in 1:length(colnames(data))){
#   if(is.numeric(data[,c])){data[,c] <- abs(data[,c])}
# }
# par(mfrow=c(1,3))
# boxplot(data$ref[data$mode=="sex"], data$ref[data$mode=="asex"], ylim=c(0,10))
# boxplot(data2$ref[data2$mode=="sex"], data2$ref[data2$mode=="asex"], ylim=c(0,10))
# boxplot(data3$ref[data3$mode=="sex"], data3$ref[data3$mode=="asex"], ylim=c(0,10))
# boxplot(data4$ref[data4$mode=="sex"], data4$ref[data4$mode=="asex"], ylim=c(0,10))
#Choose a variable
variable="host_spp"
#fmla <- as.formula(paste(variable,"~ mode + (1|genus)",sep=" "))
#m_host <- glmer(fmla, data = data, family="poisson")
#z.obs <- coef(summary(m_host))[2, "t value"]
####################################################
# Ramdomize the mode (sex, asex) within a genus
n.genera <- length(levels(data$genus)) #number of genera
l.genus <- as.vector(table(data$genus)) #list w/ number of species per genus
nboot <- 10 #number of permutations
random_test <- function(x,y) {  #x: data, y:genus
genus_name <- subset(x, genus == y)$genus
species_name <- subset(x, genus == y)$species
var <- subset(x, genus == y)[,variable]
# Sample without replacement
random_mode <- sample(subset(x, genus == y)$mode)
# Return a partial data frame (for each genus)
return(data.frame(genus_name, species_name, var, random_mode))
}
####################################################
# For each genus, run the random_test() function.
zval_model <- function(data, n.genera, count=F){
# Complete data frame initialization.
ref.distri <- data.frame(x= character(0), y= character(0), z = character(0))
for (t in 1:n.genera) {
# Sub data frame (for each genus).
part_distri <- random_test(data, levels(data$genus)[t])
# Concatenation of each sub data frames.
ref.distri <- rbind(ref.distri, part_distri)
}
#print(ref.distri)
# Model
if(count){
m1 <- glmer(var ~ random_mode + (1|genus_name), data = ref.distri,family = "poisson")
st <- "z"
print(paste0(variable, " ", count))
} else{
m1 <- lmer(var ~ random_mode + (1|genus_name), data = ref.distri)
st <- "t"
}
return(coef(summary(m1))[2, paste0(st," value")]) # Return zvalue
}
####################################################
# Main
cl <- makeCluster(detectCores()-1, outfile="")
#get library support needed to run the code
clusterEvalQ(cl,c(library(nlme),library(lme4)))
# Export variables and functions to all nodes in the cluster
clusterExport(cl,c("random_test","zval_model","data","n.genera","variable"))
# Simulations are shared among the nodes and the results are put together in the end.
#zval.reference <- replicate(nboot, zval_model(data, n.genera))
par(mfrow=c(3,2))
for(v in c("nbr_country","max_dist_eq","lat_mean","lat_median","host_spp")){
variable = v
start_time <- proc.time()[3]
clusterExport(cl,"variable")
fmla <- as.formula(paste(variable,"~ mode + (1|genus)",sep=" "))
if(v %in% c("nbr_country","host_spp")){
zval.reference <-parSapply(cl, 1:nboot, function(i,...){zval_model(data,n.genera,count=T)})
m_host <- glmer(fmla, data = data,family = "poisson")
st <- "z"
}
else{
zval.reference <-parSapply(cl, 1:nboot, function(i,...){zval_model(data,n.genera)})
m_host <- lmer(fmla, data = data)
st <- "t"
}
z.obs <- coef(summary(m_host))[2, paste0(st, " value")]
hist(main=paste0(variable, "\n","P-value = ",sum(z.obs>zval.reference)/nboot),zval.reference,
breaks = 100, xlim=c(min(c(zval.reference,z.obs)), max(c(zval.reference,z.obs)))) # Vector of nboot pvalues.
abline(v=z.obs, col="red", lwd=3)
print(paste0("P-value for ", variable, " is: ", sum(z.obs>zval.reference)/nboot))
print(paste0(nboot, " simulations for ", variable, " took", unname(proc.time()[3]-start_time), " seconds"))
}
stopCluster(cl)
#quantile(zval.reference,c(0.025, 0.975))
rm(list=ls()); library(permute); library(nlme); library(lme4);library(parallel)
data0 <- read.csv("~/Documents/Internship/Data/R_working_directory/manual/manual_processed_data.csv", header=T)
data0 <- data0[!data0$nbr_country =="0",] #remove species with no countries described
data0 <- data0[!data0$nbr_host_spp =="0",] # remove species with no hosts described
data <- data0[data0$pair != 0,]
data$pair <- as.factor(data$pair)
data$max_dist_eq <- pmax(abs(data$lat_min),abs(data$lat_max))
variable = "nbr_host_spp"
fmla <- as.formula(paste(variable,"~ mode + (1|genus/pair)",sep=" "))
m_host <- lmer(fmla, data = data)
z.obs <- coef(summary(m_host))[2, "t value"]
####################################################
# Ramdomize the mode (sex, asex) within a genus
n.pairs <- length(levels(data$pair)) #number of genera
l.genus <- as.vector(table(data$pair)) #list w/ number of species per genus
nboot <- 10000 #number of permutations
random_test <- function(x,y) {  #x: data, y:genus
pair_name <- subset(x, pair == y)$pair
species_name <- subset(x, pair == y)$species
var <- subset(x, pair == y)[,variable]
genus_name <- subset(x, pair == y)$genus
# Sample without replacement
random_mode <- sample(subset(x, pair == y)$mode)
# Return a partial data frame (for each genus)
return(data.frame(pair_name, genus_name, species_name, var, random_mode))
}
####################################################
# For each genus, run the random_test() function.
zval_model <- function(data, n.pairs,count=F){
# Complete data frame initialization.
ref.distri <- data.frame(x= character(0), y= character(0), z = character(0))
for (t in 1:n.pairs) {
# Sub data frame (for each genus).
part_distri <- random_test(data, levels(data$pair)[t])
# Concatenation of each sub data frames.
ref.distri <- rbind(ref.distri, part_distri)
}
#print(ref.distri)
# Model
if(count){
m1 <- glmer(var ~ random_mode + (1|genus_name/pair_name), data = ref.distri,family = "poisson")
st <- "z"
} else{
m1 <- lmer(var ~ random_mode + (1|genus_name/pair_name), data = ref.distri)
st <- "t"
}
print(coef(summary(m1)))
return(coef(summary(m1))[2, paste0(st," value")]) # Return zvalue
}
####################################################
# Main
# Note I leave 1 core free, so that it is still possible to do other things while the script runs
cl <- makeCluster(detectCores()-4)
#get library support needed to run the code
clusterEvalQ(cl,c(library(nlme),library(lme4)))
# Export variables and functions to all nodes in the cluster
clusterExport(cl,c("random_test","zval_model","data","n.pairs"))
# Simulations are shared among the nodes and the results are put together in the end.
par(mfrow=c(3,3))
for(v in c("nbr_country","max_dist_eq","lat_mean","lat_median","nbr_host_spp","min_length","max_length")){
variable = v
start_time <- proc.time()[3]
clusterExport(cl,"variable")
fmla <- as.formula(paste(variable,"~ mode + (1|genus/pair)",sep=" "))
if(v %in% c("nbr_country","nbr_host_spp")){
zval.reference <-parSapply(cl, 1:nboot, function(i,...){zval_model(data,n.pairs,count=T)})
m_host <- glmer(fmla, data = data,family = "poisson")
st <- "z"
}
else{
zval.reference <-parSapply(cl, 1:nboot, function(i,...){zval_model(data,n.pairs)})
m_host <- lmer(fmla, data = data)
st <- "t"
}
z.obs <- coef(summary(m_host))[2, paste0(st," value")]
hist(main=paste0(variable, "\n","P-value = ",sum(z.obs>zval.reference)/nboot),zval.reference,
breaks = 100, xlim=c(min(c(zval.reference,z.obs)), max(c(zval.reference,z.obs)))) # Vector of nboot pvalues.
abline(v=z.obs, col="red", lwd=3)
print(paste0("P-value for ", variable, " is: ", sum(z.obs>zval.reference)/nboot))
print(paste0(nboot, " simulations for ", variable, " took", unname(proc.time()[3]-start_time), " seconds"))
}
stopCluster()
stopCluster(cl)
closeAllConnections()
rm(list=ls()); library(permute); library(nlme); library(lme4);library(parallel)
data0 <- read.csv("~/Documents/Internship/Data/R_working_directory/auto/auto_processed_data.csv", header=T)
citat <-read.csv("~/Dropbox/Cyril-Casper_shared/Internship_tidy/Data/auto/auto_citations_per_species.csv", header=T)
data <- merge(x=data0, y=citat, by.x=c("family","genus","species"), by.y=c("family","genus","species"), all=F)
data <- data[!data$nbr_country =="0",] #remove species with no countries described
data <- data[!data$host_spp =="0",] # remove species with no hosts described
data2 <- data[data$ref>"2",] # remove species very few studies
data3 <- data[data$ref>"4",] # remove species very few studies
data4 <- data[data$ref>"7",] # remove species very few studies
data<-data3
data$max_dist_eq <- pmax(abs(data$lat_min),abs(data$lat_max))
# for(c in 1:length(colnames(data))){
#   if(is.numeric(data[,c])){data[,c] <- abs(data[,c])}
# }
# par(mfrow=c(1,3))
# boxplot(data$ref[data$mode=="sex"], data$ref[data$mode=="asex"], ylim=c(0,10))
# boxplot(data2$ref[data2$mode=="sex"], data2$ref[data2$mode=="asex"], ylim=c(0,10))
# boxplot(data3$ref[data3$mode=="sex"], data3$ref[data3$mode=="asex"], ylim=c(0,10))
# boxplot(data4$ref[data4$mode=="sex"], data4$ref[data4$mode=="asex"], ylim=c(0,10))
#Choose a variable
variable="host_spp"
#fmla <- as.formula(paste(variable,"~ mode + (1|genus)",sep=" "))
#m_host <- glmer(fmla, data = data, family="poisson")
#z.obs <- coef(summary(m_host))[2, "t value"]
####################################################
# Ramdomize the mode (sex, asex) within a genus
n.genera <- length(levels(data$genus)) #number of genera
l.genus <- as.vector(table(data$genus)) #list w/ number of species per genus
nboot <- 10 #number of permutations
random_test <- function(x,y) {  #x: data, y:genus
genus_name <- subset(x, genus == y)$genus
species_name <- subset(x, genus == y)$species
var <- subset(x, genus == y)[,variable]
# Sample without replacement
random_mode <- sample(subset(x, genus == y)$mode)
# Return a partial data frame (for each genus)
return(data.frame(genus_name, species_name, var, random_mode))
}
####################################################
# For each genus, run the random_test() function.
zval_model <- function(data, n.genera, count=F){
# Complete data frame initialization.
ref.distri <- data.frame(x= character(0), y= character(0), z = character(0))
for (t in 1:n.genera) {
# Sub data frame (for each genus).
part_distri <- random_test(data, levels(data$genus)[t])
# Concatenation of each sub data frames.
ref.distri <- rbind(ref.distri, part_distri)
}
#print(ref.distri)
# Model
if(count){
m1 <- glmer(var ~ random_mode + (1|genus_name), data = ref.distri,family = "poisson")
st <- "z"
} else{
m1 <- lmer(var ~ random_mode + (1|genus_name), data = ref.distri)
st <- "t"
}
return(coef(summary(m1))[2, paste0(st," value")]) # Return zvalue
}
####################################################
# Main
cl <- makeCluster(detectCores()-4)
#get library support needed to run the code
clusterEvalQ(cl,c(library(nlme),library(lme4)))
# Export variables and functions to all nodes in the cluster
clusterExport(cl,c("random_test","zval_model","data","n.genera","variable"))
# Simulations are shared among the nodes and the results are put together in the end.
#zval.reference <- replicate(nboot, zval_model(data, n.genera))
par(mfrow=c(3,2))
for(v in c("nbr_country","max_dist_eq","lat_mean","lat_median","host_spp")){
variable = v
start_time <- proc.time()[3]
clusterExport(cl,"variable")
fmla <- as.formula(paste(variable,"~ mode + (1|genus)",sep=" "))
if(v %in% c("nbr_country","host_spp")){
zval.reference <-parSapply(cl, 1:nboot, function(i,...){zval_model(data,n.genera,count=T)})
m_host <- glmer(fmla, data = data,family = "poisson")
st <- "z"
}
else{
zval.reference <-parSapply(cl, 1:nboot, function(i,...){zval_model(data,n.genera)})
m_host <- lmer(fmla, data = data)
st <- "t"
}
z.obs <- coef(summary(m_host))[2, paste0(st, " value")]
hist(main=paste0(variable, "\n","P-value = ",sum(z.obs>zval.reference)/nboot),zval.reference,
breaks = 100, xlim=c(min(c(zval.reference,z.obs)), max(c(zval.reference,z.obs)))) # Vector of nboot pvalues.
abline(v=z.obs, col="red", lwd=3)
print(paste0("P-value for ", variable, " is: ", sum(z.obs>zval.reference)/nboot))
print(paste0(nboot, " simulations for ", variable, " took", unname(proc.time()[3]-start_time), " seconds"))
}
stopCluster(cl)
#quantile(zval.reference,c(0.025, 0.975))
rm(list=ls()); library(permute); library(nlme); library(lme4);library(parallel)
data0 <- read.csv("~/Documents/Internship/Data/R_working_directory/auto/auto_processed_data.csv", header=T)
citat <-read.csv("~/Dropbox/Cyril-Casper_shared/Internship_tidy/Data/auto/auto_citations_per_species.csv", header=T)
data <- merge(x=data0, y=citat, by.x=c("family","genus","species"), by.y=c("family","genus","species"), all=F)
data <- data[!data$nbr_country =="0",] #remove species with no countries described
data <- data[!data$host_spp =="0",] # remove species with no hosts described
data2 <- data[data$ref>"2",] # remove species very few studies
data3 <- data[data$ref>"4",] # remove species very few studies
data4 <- data[data$ref>"7",] # remove species very few studies
data<-data3
data$max_dist_eq <- pmax(abs(data$lat_min),abs(data$lat_max))
# for(c in 1:length(colnames(data))){
#   if(is.numeric(data[,c])){data[,c] <- abs(data[,c])}
# }
# par(mfrow=c(1,3))
# boxplot(data$ref[data$mode=="sex"], data$ref[data$mode=="asex"], ylim=c(0,10))
# boxplot(data2$ref[data2$mode=="sex"], data2$ref[data2$mode=="asex"], ylim=c(0,10))
# boxplot(data3$ref[data3$mode=="sex"], data3$ref[data3$mode=="asex"], ylim=c(0,10))
# boxplot(data4$ref[data4$mode=="sex"], data4$ref[data4$mode=="asex"], ylim=c(0,10))
#Choose a variable
variable="host_spp"
#fmla <- as.formula(paste(variable,"~ mode + (1|genus)",sep=" "))
#m_host <- glmer(fmla, data = data, family="poisson")
#z.obs <- coef(summary(m_host))[2, "t value"]
####################################################
# Ramdomize the mode (sex, asex) within a genus
n.genera <- length(levels(data$genus)) #number of genera
l.genus <- as.vector(table(data$genus)) #list w/ number of species per genus
nboot <- 10000 #number of permutations
random_test <- function(x,y) {  #x: data, y:genus
genus_name <- subset(x, genus == y)$genus
species_name <- subset(x, genus == y)$species
var <- subset(x, genus == y)[,variable]
# Sample without replacement
random_mode <- sample(subset(x, genus == y)$mode)
# Return a partial data frame (for each genus)
return(data.frame(genus_name, species_name, var, random_mode))
}
####################################################
# For each genus, run the random_test() function.
zval_model <- function(data, n.genera, count=F){
# Complete data frame initialization.
ref.distri <- data.frame(x= character(0), y= character(0), z = character(0))
for (t in 1:n.genera) {
# Sub data frame (for each genus).
part_distri <- random_test(data, levels(data$genus)[t])
# Concatenation of each sub data frames.
ref.distri <- rbind(ref.distri, part_distri)
}
#print(ref.distri)
# Model
if(count){
m1 <- glmer(var ~ random_mode + (1|genus_name), data = ref.distri,family = "poisson")
st <- "z"
} else{
m1 <- lmer(var ~ random_mode + (1|genus_name), data = ref.distri)
st <- "t"
}
return(coef(summary(m1))[2, paste0(st," value")]) # Return zvalue
}
####################################################
# Main
cl <- makeCluster(detectCores()-4)
#get library support needed to run the code
clusterEvalQ(cl,c(library(nlme),library(lme4)))
# Export variables and functions to all nodes in the cluster
clusterExport(cl,c("random_test","zval_model","data","n.genera","variable"))
# Simulations are shared among the nodes and the results are put together in the end.
#zval.reference <- replicate(nboot, zval_model(data, n.genera))
par(mfrow=c(3,2))
for(v in c("nbr_country","max_dist_eq","lat_mean","lat_median","host_spp")){
variable = v
start_time <- proc.time()[3]
clusterExport(cl,"variable")
fmla <- as.formula(paste(variable,"~ mode + (1|genus)",sep=" "))
if(v %in% c("nbr_country","host_spp")){
zval.reference <-parSapply(cl, 1:nboot, function(i,...){zval_model(data,n.genera,count=T)})
m_host <- glmer(fmla, data = data,family = "poisson")
st <- "z"
}
else{
zval.reference <-parSapply(cl, 1:nboot, function(i,...){zval_model(data,n.genera)})
m_host <- lmer(fmla, data = data)
st <- "t"
}
z.obs <- coef(summary(m_host))[2, paste0(st, " value")]
hist(main=paste0(variable, "\n","P-value = ",sum(z.obs>zval.reference)/nboot),zval.reference,
breaks = 100, xlim=c(min(c(zval.reference,z.obs)), max(c(zval.reference,z.obs)))) # Vector of nboot pvalues.
abline(v=z.obs, col="red", lwd=3)
print(paste0("P-value for ", variable, " is: ", sum(z.obs>zval.reference)/nboot))
print(paste0(nboot, " simulations for ", variable, " took", unname(proc.time()[3]-start_time), " seconds"))
}
stopCluster(cl)
#quantile(zval.reference,c(0.025, 0.975))
