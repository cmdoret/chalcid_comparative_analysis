---
title: "Observation bias"
author: "Cyril Matthey-Doret"
date: "August 17, 2016"
output: ioslides_presentation
runtime: shiny
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE)
auto_processed <-read.table("/home/cyril/Documents/Internship/Data/R_working_directory/auto/auto_processed_data.csv", header = T, sep= ",")
manual_processed <-read.table("/home/cyril/Documents/Internship/Data/R_working_directory/manual/manual_processed_data.csv", header = T, sep= ",")
library(ggplot2);library(gridExtra);library(lattice);library(MASS);library(car)
```
##Study bias issue:
```{r eruptions}
inputPanel(
sliderInput("cutoff", label = "Minimum number of locations:",
min = 0, max = 100, value = 1, step = 1)
)
renderPlot({
ggplot()+
geom_boxplot(data = auto_processed[!is.na(auto_processed$mode) & auto_processed$nbr_country>input$cutoff,],aes(x=mode,y=pmin(lat_max-lat_min)))+
ggtitle("Latitude range: Overall")+
labs(x="Reproduction mode",y="Latitude")+
annotate(x = c(1.1,2.1),y=c(10,10),geom= "text", label=c(paste0("n=",length(auto_processed[auto_processed$mode=="asex" & auto_processed$nbr_country>input$cutoff,"lat_max"])),                            paste0("n=",length(auto_processed[auto_processed$mode=="sex" & auto_processed$nbr_country>input$cutoff,"lat_max"]))))+
theme_bw()
})
```
##Study bias issue 2:
```{r qqplot}
inputPanel(
sliderInput("qqcutoff", label = "Minimum number of locations:",
min = 0, max = 100, value = 1, step = 1)
)
renderPlot({
poisson <- fitdistr(auto_processed$nbr_country[!is.na(auto_processed$mode) & auto_processed$nbr_country>input$qqcutoff],       "Poisson")
qqp(main="Poisson",auto_processed$nbr_country[!is.na(auto_processed$mode) & auto_processed$nbr_country>input$qqcutoff],         "pois", poisson$estimate)
})
```
##Study bias issue 3:
```{r densiplot}
inputPanel(
sliderInput("denscutoff", label = "Minimum number of locations:",
min = 0, max = 100, value = 1, step = 1)
)
renderPlot({
densityplot(auto_processed$nbr_country[auto_processed$nbr_country>input$denscutoff])
})
```
This R Markdown presentation is made interactive using Shiny. The viewers of the presentation can change the assumptions underlying what's presented and see the results immediately.
To learn more, see [Interactive Documents](http://rmarkdown.rstudio.com/authoring_shiny.html).
## Bullets
- Bullet 1
- Bullet 2
- Bullet 3
## R Output
```{r cars}
summary(cars)
```
auto_processed <-read.table("/home/cyril/Documents/Internship/Data/R_working_directory/auto/auto_processed_data.csv", header = T, sep= ",")
manual_processed <-read.table("/home/cyril/Documents/Internship/Data/R_working_directory/manual/manual_processed_data.csv", header = T, sep= ",")
TAD <- read.table("TAD/short/short_TADs.bed")
TAD <- cbind(paste("short",row.names(TAD),sep="_"),TAD)
TAD <- TAD[,-5]
colnames(TADb10) <-c("chr", "start","end")
colnames(TAD)<-c("ID","chr", "start","end")
setwd("/home/cyril/Documents/Master/sem_1/First_step/data")
TAD <- read.table("TAD/short/short_TADs.bed")
TAD <- cbind(paste("short",row.names(TAD),sep="_"),TAD)
TAD <- TAD[,-5]
colnames(TADb10) <-c("chr", "start","end")
colnames(TAD)<-c("ID","chr", "start","end")
inner_bins <- function(TAD,w){  # Takes a TAD as an input and the binwidth as %TAD length (e.g. 0.05 for 5%)
TAD_start <- as.numeric(TAD[3])
TAD_end <-   as.numeric(TAD[4])
TAD_ID <- as.character(TAD[1])
TAD_chr <- as.character(TAD[2])
bin_coord <- seq(TAD_start,TAD_end,(TAD_end - TAD_start)*w)
nbins <- length(bin_coord)-1
bins <- data.frame(ID=rep(NA,nbins),
chr=rep(NA,nbins),
start=rep(NA,nbins),
end=rep(NA,nbins),
bin=rep(NA,nbins))
for(i in 1:nbins){
bins[i,] <- c(TAD_ID,TAD_chr,bin_coord[i],bin_coord[i+1],i)
}
return(bins)  # Returns all inner bins for the input TAD
}
short_bins <-apply(X=TAD,MARGIN = 1,FUN=inner_bins, w=0.05)
short_bins <- do.call("rbind",short_bins)
options(scipen=999)
write.table(short_bins,file="TAD/short/short_bins5.bed",quote = F, sep="\t",col.names = F,row.names = F)
options(scipen=999)
write.table(short_bins,file="TAD/short/short_bins5.bed",quote = F, sep="\t",col.names = F,row.names = F)
write.table(short_bins,file="TAD/short/short_bins5.bed",quote = F, sep="\t",col.names = F,row.names = F)
options(scipen=999)
short_bins <-apply(X=TAD,MARGIN = 1,FUN=inner_bins, w=0.05)
short_bins <- do.call("rbind",short_bins)
write.table(short_bins,file="TAD/short/short_bins5.bed",quote = F, sep="\t",col.names = F,row.names = F)
# This scripts intends to test if sexual species from which asexual species
# diverged are more widely distributed or have more hosts than other sexual
# species. Here, I will merge both datasets, since I only have information
# about relatedness in the auto dataset, and I only have closest relative in
# the manual dataset. The approach consists in comparing the sexuals from
# manual, versus the other sexuals in the auto dataset within the same genus.
rm(list=ls()); library(permute); library(nlme); library(lme4)
######
#Data#
######
# Loading number of references.
citat <-read.csv("~/Dropbox/Cyril-Casper_shared/Internship/Data/auto/auto_citations_per_species.csv", header=T)
# Loading dataset and merging dataset with citations. Only species for which both data and number of citations is available will be kept.
manu0 <- read.csv("~/Documents/Internship/Data/R_working_directory/manual/manual_processed_data.csv")
manu <- merge(x=manu0, y=citat, by.x=c("family","genus","species"), by.y=c("family","genus","species"), all=F)
close_sex0 <-manu[manu$pair!=0 & manu$mode=="sex",]
close_sex <- cbind(close_sex0, diverg=rep("close"))
close_sex <- close_sex[!close_sex$nbr_country=="0" & !close_sex$nbr_host_spp=="0",]
# Loading dataset and merging dataset with citations. Only species for which both data and number of citations is available will be kept.
auto0 <- read.csv("~/Documents/Internship/Data/R_working_directory/auto/auto_processed_data.csv", header=T)
auto <- merge(x=auto0, y=citat, by.x=c("family","genus","species"), by.y=c("family","genus","species"), all=F)
auto <- auto[!auto$nbr_country =="0",] #remove species with no countries described
auto <- auto[!auto$host_spp =="0",] # remove species with no hosts described
# Conserving only sexual species
far_sex0 <- auto[auto$mode=="sex",]
# Adding a column, to label those species as "far", meaning they are not closely related to an asexual species.
far_sex <- cbind(far_sex0, diverg=rep("far"))
# Changing colnames for successful rbind.
close_sex <- close_sex[,c("family", "genus", "species", "mode", "lon_min", "lon_max",
"lon_mean", "lon_median", "lat_min", "lat_max", "lat_mean",
"lat_median", "nbr_country", "nbr_host_spp", "eco", "ref", "diverg")]
colnames(close_sex)[14] <- "host_spp"
far_sex <- far_sex[, c("family", "genus", "species", "mode", "lon_min", "lon_max", "lon_mean",
"lon_median", "lat_min", "lat_max", "lat_mean", "lat_median", "nbr_country",
"host_spp", "eco", "ref", "diverg")]
#Merging both sets with rbind.
merged_sets <- rbind(close_sex, far_sex[far_sex$genus %in% close_sex$genus,])
merged_sets <- merged_sets[!is.na(merged_sets$genus),]
# Removing all dupplicate species to keep only those coming from close_sex.
merged <- subset(merged_sets, subset = !(duplicated(merged_sets$species) & duplicated(merged_sets$genus) &  merged_sets$diverg=="far"))
# Removing all genera without any "close" species.
merged$genus <-droplevels(merged$genus)
# Applying different cutoffs for references
merged2 <- merged[merged$ref>"2",] # remove species very few studies
merged3 <- merged[merged$ref>"4",] # remove species very few studies
merged4 <- merged[merged$ref>"7",] # remove species very few studies
##########
#ANALYSIS#
##########
#Comparing distribution of the number of references in both groups with different cutoff (would ideally be equal)
par(mfrow=c(1,3))
boxplot(merged$ref[merged$diverg=="close"], merged$ref[merged$diverg=="far"], ylim=c(0,10))
boxplot(merged2$ref[merged2$diverg=="close"], merged2$ref[merged2$diverg=="far"], ylim=c(0,10))
boxplot(merged3$ref[merged3$diverg=="close"], merged3$ref[merged3$diverg=="far"], ylim=c(0,10))
boxplot(merged4$ref[merged4$diverg=="close"], merged4$ref[merged4$diverg=="far"], ylim=c(0,10))
# Model, using divergence as a two level factor (far vs close) where close means the species is the closest relative of an asexual species.
m_host <- glmer(host_spp ~ diverg + (1|genus), data = merged, family="poisson")
z.obs <- coef(summary(m_host))[2, "z value"]
####################################################
# Randomize the divergence (close, far) within a genus
n.genera <- length(levels(merged$genus)) #number of genera
l.genus <- as.vector(table(merged$genus)) #list w/ number of species per genus
nboot <- 100 #number of permutations
random_test <- function(x,y) {  #x: merged, y:genus
genus_name <- subset(x, genus == y)$genus
species_name <- subset(x, genus == y)$species
host_spp <- subset(x, genus == y)$host_spp
# Sample without replacement
random_diverg <- sample(subset(x, genus == y)$diverg)
# Return a partial data frame (for each genus)
return(data.frame(genus_name, species_name, host_spp, random_diverg))
}
####################################################
# For each genus, run the random_test() function.
zval_model <- function(data, n.genera){
# Complete data frame initialization.
ref.distri <- data.frame(x= character(0), y= character(0), z = character(0))
for (t in 1:n.genera) {
# Sub data frame (for each genus).
part_distri <- random_test(data, levels(data$genus)[t])
# Concatenation of each sub data frames.
ref.distri <- rbind(ref.distri, part_distri)
}
#print(ref.distri)
# Model
m1 <- glmer(host_spp ~ random_diverg + (1|genus_name), data = ref.distri, family="poisson")
return(coef(summary(m1))[2, "z value"]) # Return zvalue
}
####################################################
# Main
zval.reference <- replicate(nboot, zval_model(merged, n.genera))
hist(zval.reference, breaks = 30, xlim=c(-60, 60)) # Vector of nboot pvalues.
abline(v=z.obs, col="red", lwd=3)
quantile(zval.reference,c(0.025, 0.975))
sum(z.obs>zval.reference)/nboot
data0 <- read.csv("~/Documents/Internship/Data/R_working_directory/auto/auto_processed_data.csv", header=T)
citat <-read.csv("~/Dropbox/Cyril-Casper_shared/Internship/Data/auto/auto_citations_per_species.csv", header=T)
data <- merge(x=data0, y=citat, by.x=c("family","genus","species"), by.y=c("family","genus","species"), all=F)
data <- data[!data$nbr_country =="0",] #remove species with no countries described
data <- data[!data$host_spp =="0",] # remove species with no hosts described
data2 <- data[data$ref>"2",] # remove species very few studies
data3 <- data[data$ref>"4",] # remove species very few studies
data4 <- data[data$ref>"7",] # remove species very few studies
data0 <- read.csv("~/Documents/Internship/Data/R_working_directory/auto/auto_processed_data.csv", header=T)
citat <-read.csv("~/Dropbox/Cyril-Casper_shared/Internship/Data/auto/auto_citations_per_species.csv", header=T)
data <- merge(x=data0, y=citat, by.x=c("family","genus","species"), by.y=c("family","genus","species"), all=F)
data <- data[!data$nbr_country =="0",] #remove species with no countries described
data <- data[!data$host_spp =="0",] # remove species with no hosts described
data2 <- data[data$ref>"2",] # remove species very few studies
data3 <- data[data$ref>"4",] # remove species very few studies
data4 <- data[data$ref>"7",] # remove species very few studies
head(data4)
library(ggplot2)
auto_processed <-read.table("/home/cyril/Documents/Internship/Data/R_working_directory/auto/auto_processed_data.csv", header = T, sep= ",")
manual_processed <-read.table("/home/cyril/Documents/Internship/Data/R_working_directory/manual/manual_processed_data.csv", header = T, sep= ",")
library(ggplot2)
library(gridExtra)
library(lattice)
#Effetct size: automated
max_dist_eq <- pmax(abs(auto_processed$lat_min),abs(auto_processed$lat_max))
lat_range <- auto_processed$lat_max-auto_processed$lat_min
auto_processed <- cbind(auto_processed, lat_range, max_dist_eq)
effect_asex <- c()
effect_sex <- c()
variable_names <- c()
for(var in c("nbr_country", "host_spp", "max_dist_eq", "lat_median", "lat_range")) #loops over variable
{
restrict <- auto_processed$nbr_country>0 #excluding species with 0 locations
if(var=="lat_range")
{
restrict <- auto_processed$nbr_country>1 #raising exclusion threshold to 1 when computing ranges (to avoid ranges of 0)
}
if(var=="host_spp")
{
restrict <- auto_processed$host_spp>0 #changing restriction to host species when using this variable
}
medgenus_asex <-c() #reseting genus vector
medgenus_sex <- c() #resetting genus vector
for(g in levels(auto_processed$genus)) #loops over genera
{
tmp_med_asex <- median(auto_processed[auto_processed$genus==g & auto_processed$mode=="asex" & restrict,var],na.rm = T) #computes per genus median for asex spp
tmp_med_sex <- median(auto_processed[auto_processed$genus==g & auto_processed$mode=="sex" & restrict,var],na.rm = T) #computes per genus median for sex spp
medgenus_asex <- append(medgenus_asex, tmp_med_asex) #adds it to a vector
medgenus_sex <- append(medgenus_sex, tmp_med_sex) #adds it to a vector
}
variable_names <- append(variable_names, var) # stores variable names for further use
effect_asex <- append(effect_asex, mean(medgenus_asex,na.rm=T)) # Takes the mean of values from all genera for asex spp
effect_sex <- append(effect_sex, mean(medgenus_sex,na.rm=T)) #Takes the mean of values from all genera for sex spp
}
df_effect <- data.frame(variable_names, effect_asex, effect_sex)
#Effect size: manual
max_dist_eq <- pmax(abs(manual_processed$lat_min),abs(manual_processed$lat_max))
lat_range <- manual_processed$lat_max-manual_processed$lat_min
body_length <- rowMeans(cbind(manual_processed$min_length,manual_processed$max_length))
manual_processed <- cbind(manual_processed, lat_range, max_dist_eq, body_length)
effect_asex <- c()
effect_sex <- c()
variable_names <- c()
for (var in c("nbr_country", "nbr_host_spp", "body_length","max_dist_eq", "lat_median", "lat_range"))
{
restrict <- manual_processed$nbr_country>0 #excluding species with 0 locations
if(var=="lat_range")
{
restrict <- manual_processed$nbr_country>1 #raising exclusion threshold to 1 when computing ranges (to avoid ranges of 0)
}
if(var=="nbr_host_spp")
{
restrict <- manual_processed$nbr_host_spp>0 #changing restriction to host species when using this variable
}
medpair_asex <- c()
medpair_sex <- c()
for(p in 1:max(manual_processed$pair)) #looping over pairs, excluding pair number 0 since it represents unpaired species
{
tmp_med_asex <- median(manual_processed[manual_processed$pair==p & manual_processed$mode=="asex" & restrict,var],na.rm = T) #computes per genus median for asex spp
tmp_med_sex <- median(manual_processed[manual_processed$pair==p & manual_processed$mode=="sex" & restrict,var],na.rm = T) #computes per genus median for sex spp
medpair_asex <- append(medpair_asex, tmp_med_asex) #adds it to a vector
medpair_sex <- append(medpair_sex, tmp_med_sex) #adds it to a vector
}
variable_names <- append(variable_names, var) # stores variable names for further use
effect_asex <- append(effect_asex, mean(medpair_asex,na.rm=T)) # Takes the mean of values from all genera for asex spp
effect_sex <- append(effect_sex, mean(medpair_sex,na.rm=T)) #Takes the mean of values from all genera for sex spp
}
df_effect <- data.frame(variable_names, effect_asex, effect_sex)
View(df_effect)
setwd("/home/cyril/Documents/Internship/Data/R_working_directory/stats/")
write.table(df_effect, file="effect_size.txt", row.names=F, quote=F, sep="\t")
write.table(df_effect, file="effect_size.txt", row.names=F, quote=F, sep=",")
