data <- data[!data$host_spp =="0",] # remove species with no hosts described
cut_data <- data[data$ref>4,] # remove species very few studies
data<-cut_data
data$max_dist_eq <- pmax(abs(data$lat_min),abs(data$lat_max))
data$min_dist_eq <- pmin(abs(data$lat_min),abs(data$lat_max))
pc <- prcomp(x = data[,4:15])$x
weight <- prcomp(x=data[,4:15])$rotation
ggplot()+
geom_point(aes(x=pc[,5],y=pc[,7],col=data$mode))
res.pca <- PCA(data[,c(4:15,18:20)], graph = FALSE)
# Proportion of variance explained by each PC
fviz_screeplot(res.pca, ncp=10)
# Which variables correlate together ? which are best described by the 2 first PC
# The sum of the cos2 for variables on the principal components is equal to one.
# If a variable is perfectly represented by only two components, the sum of the
# cos2 is equal to one. In this case the variables will be positioned on the circle of correlations.
fviz_pca_var(res.pca, col.var="cos2") +
scale_color_gradient2(low="white", mid="blue",
high="red", midpoint=0.5) + theme_minimal()
# Control variable colors using their contributions
fviz_pca_var(res.pca, col.var="contrib") +
scale_color_gradient2(low="white", mid="blue",
high="red", midpoint=8) + theme_minimal()
# Contribution of each variable to variation between species on PC1 and PC2
fviz_pca_contrib(res.pca, choice = "var", axes = 1)
fviz_pca_contrib(res.pca, choice = "var", axes = 2)
fviz_pca_contrib(res.pca, choice = "var", axes = 1:2) # Contribution on PC 1 and 2 together
fviz_pca_ind(res.pca,axes=c(2,4),habillage = data$mode,geom="point")
fviz_pca_ind(res.pca,axes=c(2,4),habillage=data$family,geom="point")
pairs(res.pca$ind$coord,col=data$mode)
#fviz_pca_contrib(res.pca, choice = "ind", axes = 1,color=data$mode)
fviz_pca_contrib(res.pca, choice = "var", axes = 4)
fviz_pca_contrib(res.pca, choice = "var", axes = 5)
fviz_pca_var(res.pca, col.var="contrib") +
scale_color_gradient2(low="white", mid="blue",
high="red", midpoint=8) + theme_minimal()
fviz_pca_var(res.pca, col.var="contrib",axes =c(4,5)) +
scale_color_gradient2(low="white", mid="blue",
high="red", midpoint=8) + theme_minimal()
fviz_pca_var(res.pca, col.var="contrib",axes =c(3,5)) +
scale_color_gradient2(low="white", mid="blue",
high="red", midpoint=8) + theme_minimal()
fviz_pca_var(res.pca, col.var="contrib",axes =c(2,5)) +
scale_color_gradient2(low="white", mid="blue",
high="red", midpoint=8) + theme_minimal()
fviz_pca_var(res.pca, col.var="contrib",axes =c(1,5)) +
scale_color_gradient2(low="white", mid="blue",
high="red", midpoint=8) + theme_minimal()
fviz_pca_var(res.pca, col.var="contrib",axes =c(1,3)) +
scale_color_gradient2(low="white", mid="blue",
high="red", midpoint=8) + theme_minimal()
fviz_pca_var(res.pca, col.var="contrib",axes =c(1,2)) +
scale_color_gradient2(low="white", mid="blue",
high="red", midpoint=8) + theme_minimal()
rm(list=ls()); library(permute); library(nlme); library(lme4);library(parallel)
#data0 <- read.csv("~/Documents/Internship/Data/R_working_directory/auto/auto_processed_data.csv", header=T)
data0 <- read.csv("~/Documents/Internship/chalcid_comparative_analysis/Data/R_working_directory/auto/auto_processed_data.csv", header=T)
citat <-read.csv("~/Dropbox/Cyril-Casper_shared/Internship_tidy/Data/auto/auto_citations_per_species.csv", header=T)
data <- merge(x=data0, y=citat, by.x=c("family","genus","species"), by.y=c("family","genus","species"), all=F)
data <- data[!data$nbr_country =="0",] #remove species with no countries described
data <- data[!data$host_spp =="0",] # remove species with no hosts described
data2 <- data[data$ref>2,] # remove species very few studies
data3 <- data[data$ref>4,] # remove species very few studies
data8 <- data[data$ref>8,] # remove species very few studies
data<-data3
data$max_dist_eq <- pmax(abs(data$lat_min),abs(data$lat_max))
data$min_dist_eq <- pmin(abs(data$lat_min),abs(data$lat_max))
# for(c in 1:length(colnames(data))){
#   if(is.numeric(data[,c])){data[,c] <- abs(data[,c])}
# }
# par(mfrow=c(1,3))
# boxplot(data$ref[data$mode=="sex"], data$ref[data$mode=="asex"], ylim=c(0,10))
# boxplot(data2$ref[data2$mode=="sex"], data2$ref[data2$mode=="asex"], ylim=c(0,10))
# boxplot(data3$ref[data3$mode=="sex"], data3$ref[data3$mode=="asex"], ylim=c(0,10))
# boxplot(data4$ref[data4$mode=="sex"], data4$ref[data4$mode=="asex"], ylim=c(0,10))
#Choose a variable
variable="host_spp"
colnames(data)
glmer(data=data, formula = mode ~ genus + nbr_country + min_dist_eq + max_dist_eq + ref + eco + lat_mean + lon_mean + host_spp)
glmer(data=data, formula = mode ~ genus + nbr_country + min_dist_eq + max_dist_eq + ref + eco + lat_mean + lon_mean + host_spp,family=binomial)
glmer(data=data, formula = mode ~ (1|genus) + nbr_country + min_dist_eq + max_dist_eq + ref + eco + lat_mean + lon_mean + host_spp,family=binomial)
exp_mod <- glmer(data=data, formula = mode ~ (1|genus) + nbr_country + min_dist_eq + max_dist_eq + ref + eco + lat_mean + lon_mean + host_spp,
family=binomial)
summary(exp_mod)
exp_mod <- glmer(data=data, formula = mode ~ (1|genus) + nbr_country + min_dist_eq + max_dist_eq + ref + eco + lat_mean + lon_mean + host_spp,
family=binomial(link = logit))
summary(exp_mod)
custom_model <- function(data, n.genera, count=F){
# Complete data frame initialization.
ref.distri <- data.frame(x= character(0), y= character(0), z = character(0))
for (t in 1:n.genera) {
# Sub data frame (for each genus).
part_distri <- random_test(data, levels(data$genus)[t])
# Concatenation of each sub data frames.
ref.distri <- rbind(ref.distri, part_distri)
}
#print(ref.distri)
# Model
if(count){
m1 <- glmer(var ~ random_mode + (1|genus_name), data = ref.distri,family = "poisson")
st <- "z"
} else{
m1 <- lmer(var ~ random_mode + (1|genus_name), data = ref.distri)
st <- "t"
}
return(summary(m1)) # Return zvalue
}
data0 <- read.csv("~/Documents/Internship/Data/R_working_directory/auto/auto_processed_data.csv", header=T)
citat <-read.csv("~/Dropbox/Cyril-Casper_shared/Internship_tidy/Data/auto/auto_citations_per_species.csv", header=T)
data <- merge(x=data0, y=citat, by.x=c("family","genus","species"), by.y=c("family","genus","species"), all=F)
nrow(data[!data$nbr_country =="0",])
nrow(data[!data$nbr_country ==0,])
library(ggplot2);library(FactoMineR); library(factoextra)
#data0 <- read.csv("~/Documents/Internship/Data/R_working_directory/auto/auto_processed_data.csv", header=T)
data0 <- read.csv("~/Documents/Internship/chalcid_comparative_analysis/Data/R_working_directory/auto/auto_processed_data.csv", header=T)
citat <-read.csv("~/Dropbox/Cyril-Casper_shared/Internship_tidy/Data/auto/auto_citations_per_species.csv", header=T)
data <- merge(x=data0, y=citat, by.x=c("family","genus","species"), by.y=c("family","genus","species"), all=F)
data <- data[!data$nbr_country =="0",] #remove species with no countries described
data <- data[!data$host_spp =="0",] # remove species with no hosts described
cut_data <- data[data$ref>4,] # remove species very few studies
data<-cut_data
data$max_dist_eq <- pmax(abs(data$lat_min),abs(data$lat_max))
data$min_dist_eq <- pmin(abs(data$lat_min),abs(data$lat_max))
pc <- prcomp(x = data[,4:15])$x
weight <- prcomp(x=data[,4:15])$rotation
ggplot()+
geom_point(aes(x=pc[,5],y=pc[,7],col=data$mode))
res.pca <- PCA(data[,c(4:15,18:20)], graph = FALSE)
fviz_screeplot(res.pca, ncp=10)
fviz_pca_var(res.pca, col.var="cos2") +
scale_color_gradient2(low="white", mid="blue",
high="red", midpoint=0.5) + theme_minimal()
fviz_pca_var(res.pca, col.var="contrib",axes =c(1,2)) +
scale_color_gradient2(low="white", mid="blue",
high="red", midpoint=8) + theme_minimal()
fviz_pca_var(res.pca, col.var="contrib",axes =c(1,2)) +
scale_color_gradient2(low="white", mid="blue",
high="red", midpoint=3) + theme_minimal()
rm(list=ls()); library(permute); library(nlme); library(lme4);library(parallel)
#data0 <- read.csv("~/Documents/Internship/Data/R_working_directory/auto/auto_processed_data.csv", header=T)
data0 <- read.csv("~/Documents/Internship/chalcid_comparative_analysis/Data/R_working_directory/auto/auto_processed_data.csv", header=T)
citat <-read.csv("~/Dropbox/Cyril-Casper_shared/Internship_tidy/Data/auto/auto_citations_per_species.csv", header=T)
data <- merge(x=data0, y=citat, by.x=c("family","genus","species"), by.y=c("family","genus","species"), all=F)
data <- data[!data$nbr_country =="0",] #remove species with no countries described
data <- data[!data$host_spp =="0",] # remove species with no hosts described
data2 <- data[data$ref>2,] # remove species very few studies
data$max_dist_eq <- pmax(abs(data$lat_min),abs(data$lat_max))
data$min_dist_eq <- pmin(abs(data$lat_min),abs(data$lat_max))
variable="min_dist_eq"
n.genera <- length(levels(data$genus)) #number of genera
l.genus <- as.vector(table(data$genus)) #list w/ number of species per genus
nboot <- 100 #number of permutations
random_test <- function(x,y) {  #x: data, y:genus
genus_name <- subset(x, genus == y)$genus
species_name <- subset(x, genus == y)$species
var <- subset(x, genus == y)[,variable]
# Sample without replacement
random_mode <- sample(subset(x, genus == y)$mode)
# Return a partial data frame (for each genus)
return(data.frame(genus_name, species_name, var, random_mode))
}
####################################################
# For each genus, run the random_test() function.
zval_model <- function(data, n.genera, count=F){
# Complete data frame initialization.
ref.distri <- data.frame(x= character(0), y= character(0), z = character(0))
for (t in 1:n.genera) {
# Sub data frame (for each genus).
part_distri <- random_test(data, levels(data$genus)[t])
# Concatenation of each sub data frames.
ref.distri <- rbind(ref.distri, part_distri)
}
#print(ref.distri)
# Model
if(count){
m1 <- glmer(var ~ random_mode + (1|genus_name), data = ref.distri,family = "poisson")
st <- "z"
} else{
m1 <- lmer(var ~ random_mode + (1|genus_name), data = ref.distri)
st <- "t"
}
return(coef(summary(m1))[2, paste0(st," value")]) # Return zvalue
}
custom_model <- function(data, n.genera, count=F){
# Complete data frame initialization.
ref.distri <- data.frame(x= character(0), y= character(0), z = character(0))
for (t in 1:n.genera) {
# Sub data frame (for each genus).
part_distri <- random_test(data, levels(data$genus)[t])
# Concatenation of each sub data frames.
ref.distri <- rbind(ref.distri, part_distri)
}
#print(ref.distri)
# Model
if(count){
m1 <- glmer(var ~ random_mode + (1|genus_name), data = ref.distri,family = "poisson")
st <- "z"
} else{
m1 <- lmer(var ~ random_mode + (1|genus_name), data = ref.distri)
st <- "t"
}
return(summary(m1)) # Return zvalue
}
fmla <- as.formula(paste(variable,"~ mode + (1|genus)",sep=" "))
m_host <- glmer(fmla, data = cut_data,family = "poisson")
lmer(fmla, data = cut_data)
hist(data$min_dist_eq )
hist(data$min_dist_eq, breaks=500)
hist(data$min_dist_eq, breaks=100)
hist(data$min_dist_eq, breaks=50)
hist(data$min_dist_eq, breaks=30)
hist(data$min_dist_eq, breaks=20)
library(MCMCglmm)
library(MASS)
qqplot(data$min_dist_eq)
mydf=data
par(mfrow=c(2,2))
nbinom <- fitdistr(mydf$max_dist_eq[!is.na(mydf$max_dist_eq)], "Negative Binomial")
gamma <- fitdistr(mydf$max_dist_eq, "Gamma")
qqp(main="Gamma",mydf$max_dist_eq, "gamma", shape = gamma$estimate[[1]], rate = gamma$estimate[[2]])
qqp(main="Lognormal", mydf$max_dist_eq,"lnorm")
qqp(main="Normal", mydf$max_dist_eq,"norm")
poisson <- fitdistr(mydf$max_dist_eq[!is.na(mydf$max_dist_eq)], "Poisson")
qqp(main="Poisson",mydf$max_dist_eq, "pois", poisson$estimate)
library(car)
par(mfrow=c(2,2))
nbinom <- fitdistr(mydf$max_dist_eq[!is.na(mydf$max_dist_eq)], "Negative Binomial")
gamma <- fitdistr(mydf$max_dist_eq, "Gamma")
qqp(main="Gamma",mydf$max_dist_eq, "gamma", shape = gamma$estimate[[1]], rate = gamma$estimate[[2]])
qqp(main="Lognormal", mydf$max_dist_eq,"lnorm")
qqp(main="Normal", mydf$max_dist_eq,"norm")
poisson <- fitdistr(mydf$max_dist_eq[!is.na(mydf$max_dist_eq)], "Poisson")
qqp(main="Poisson",mydf$max_dist_eq, "pois", poisson$estimate)
nrow(data[data$lat_mean<0,])
nrow(data[data$lat_mean>0,])
nrow(data[data$lat_mean>0 & data$mode =="asex",])
nrow(data[data$lat_mean>0 & data$mode =="asex",])
nrow(data[data$lat_mean<0 & data$mode =="asex",])
data0 <- read.csv("~/Documents/Internship/chalcid_comparative_analysis/Data/R_working_directory/auto/auto_processed_data.csv", header=T)
citat <-read.csv("~/Dropbox/Cyril-Casper_shared/Internship_tidy/Data/auto/auto_citations_per_species.csv", header=T)
data <- merge(x=data0, y=citat, by.x=c("family","genus","species"), by.y=c("family","genus","species"), all=F)
length(data)
nrow(data)
data <- data[!data$nbr_country =="0",] #remove species with no countries described
nrow(data)
data <- data[!data$nbr_country =="1",] #remove species with no countries described
nrow(data)
library(ggplot2);library(FactoMineR); library(factoextra)
#data0 <- read.csv("~/Documents/Internship/Data/R_working_directory/auto/auto_processed_data.csv", header=T)
data0 <- read.csv("~/Documents/Internship/chalcid_comparative_analysis/Data/R_working_directory/auto/auto_processed_data.csv", header=T)
citat <-read.csv("~/Dropbox/Cyril-Casper_shared/Internship_tidy/Data/auto/auto_citations_per_species.csv", header=T)
data <- merge(x=data0, y=citat, by.x=c("family","genus","species"), by.y=c("family","genus","species"), all=F)
data <- data[!data$nbr_country =="0",] #remove species with no countries described
data <- data[!data$host_spp =="0",] # remove species with no hosts described
cut_data <- data[data$ref>4,] # remove species very few studies
data<-cut_data
data$max_dist_eq <- pmax(abs(data$lat_min),abs(data$lat_max))
data$min_dist_eq <- pmin(abs(data$lat_min),abs(data$lat_max))
pc <- prcomp(x = data[,4:15])$x
weight <- prcomp(x=data[,4:15])$rotation
ggplot()+
geom_point(aes(x=pc[,5],y=pc[,7],col=data$mode))
res.pca <- PCA(data[,c(4:15,18:20)], graph = FALSE)
fviz_pca_var(res.pca, col.var="contrib",axes =c(1,2)) +
scale_color_gradient2(low="white", mid="blue",
high="red", midpoint=3) + theme_minimal()
colmnames(data)
colnames(data)
colnames(data)[c(4:15,18:20)]
fviz_screeplot(res.pca, ncp=10)
fviz_pca_var(res.pca, col.var="contrib",axes =c(1,2)) +
scale_color_gradient2(low="white", mid="blue",
high="red", midpoint=3) + theme_minimal()
fviz_pca_contrib(res.pca, choice = "var", axes = 1)
fviz_pca_contrib(res.pca, choice = "var", axes = 2)
fviz_pca_contrib(res.pca, choice = "var", axes = 5)
fviz_screeplot(res.pca, ncp=10)
colnames(data)[c(4:15,18:20)]
colnames(data)[c(4:15)]
colnames(data)[c(4:12,15,18)]
colnames(data)[c(4:8,15,18)]
res.pca <- PCA(data[,c(4:8,15,18)], graph = FALSE)
fviz_screeplot(res.pca, ncp=10)
fviz_pca_var(res.pca, col.var="cos2") +
scale_color_gradient2(low="white", mid="blue",
high="red", midpoint=0.5) + theme_minimal()
# Control variable colors using their contributions
fviz_pca_var(res.pca, col.var="contrib",axes =c(1,2)) +
scale_color_gradient2(low="white", mid="blue",
high="red", midpoint=3) + theme_minimal()
fviz_pca_contrib(res.pca, choice = "var", axes = 1)
fviz_pca_contrib(res.pca, choice = "var", axes = 5)
fviz_pca_ind(res.pca,axes=c(2,4),habillage = data$mode,geom="point")
pairs(res.pca$ind$coord,col=data$mode)
f0viz_pca_contrib(res.pca, choice = "var", axes = 2:3) # Contribution on PC 1 and 2 together
fviz_pca_contrib(res.pca, choice = "var", axes = 2)
fviz_pca_contrib(res.pca, choice = "var", axes = 5)
fviz_pca_contrib(res.pca, choice = "var", axes = 3)
fviz_pca_ind(res.pca,axes=c(23),habillage=data$family,geom="point")
fviz_pca_ind(res.pca,axes=c(2,3),habillage=data$family,geom="point")
fviz_pca_ind(res.pca,axes=c(2,3),habillage = data$mode,geom="point")
fviz_pca_ind(res.pca,axes=c(2,3),habillage = data$mode,geom="point")
fviz_pca_ind(res.pca,axes=c(2,3),habillage=data$family,geom="point")
fviz_pca_ind(res.pca,axes=c(2,3),habillage = data$mode,geom="point")
fviz_pca_contrib(res.pca, choice = "var", axes = 2)
fviz_pca_contrib(res.pca, choice = "var", axes = 3)
fviz_pca_contrib(res.pca, choice = "var", axes = 2:3)
mindist <- function(Min,Max){
if((Max*Min) > 0){
min_dist_eq <- pmin(abs(Min),abs(Max))
} else{
min_dist_eq <- 0
}
return(min_dist_eq)
}
data$min_dist_eq <- apply(data,MARGIN = 1,FUN = mindist, Min = data$lat_max, Max = data$lat_max)
test<- apply(data,MARGIN = 1,FUN = mindist, Min = data$lat_max, Max = data$lat_max)
test<- apply(1:nrow(data),MARGIN = 1,FUN = mindist, Min = data$lat_max, Max = data$lat_max)
1:nrow(data)
mindist <- function(mydf){
Min = myrow$lat_min
Max = myrow$lat_max
if((Max*Min) > 0){
min_dist_eq <- pmin(abs(Min),abs(Max))
} else{
min_dist_eq <- 0
}
return(min_dist_eq)
}
mindist <- function(myrow){
Min = myrow$lat_min
Max = myrow$lat_max
if((Max*Min) > 0){
min_dist_eq <- pmin(abs(Min),abs(Max))
} else{
min_dist_eq <- 0
}
return(min_dist_eq)
}
test<- apply(data,MARGIN = 1,FUN = mindist)
View(data)
mindist <- function(myrow){
Min = myrow[5]
Max = myrow[7]
if((Max*Min) > 0){
min_dist_eq <- pmin(abs(Min),abs(Max))
} else{
min_dist_eq <- 0
}
return(min_dist_eq)
}
test<- apply(data,MARGIN = 1,FUN = mindist)
mindist <- function(myrow){
Min = myrow[5]
Max = myrow[7]
#if((Max*Min) > 0){
#  min_dist_eq <- pmin(abs(Min),abs(Max))
#} else{
#  min_dist_eq <- 0
#}
return(Min)
}
test<- apply(data,MARGIN = 1,FUN = mindist)
test
mindist <- function(myrow){
Min = as.numeric(myrow[5])
Max = as.numeric(myrow[7])
if((Max*Min) > 0){
min_dist_eq <- pmin(abs(Min),abs(Max))
} else{
min_dist_eq <- 0
}
return(min_dist_eq)
}
test<- apply(data,MARGIN = 1,FUN = mindist)
test
str(test)
unname(test)
data$min_dist_eq <- unname(tmp_mindist)
tmp_mindist<- apply(data,MARGIN = 1,FUN = mindist)
data$min_dist_eq <- unname(tmp_mindist)
hist(data$"minn38")
hist(data$min_dist_eq)
hist(data$min_dist_eq,breaks=20)
hist(data$min_dist_eq,break=20)
hist(data$min_dist_eq,break=20)
hist(data$min_dist_eq,breaks=20)
hist(data$min_dist_eq,breaks=30)
hist(data$min_dist_eq,breaks=40)
data$lat_range
View(data)
data$lat_range <- abs(data$lat_max-data$lat_min)
hist(data$lat_range)
hist(data$lat_range,breaks = 50)
data$lat_range[data$lat_range == 0] <- 0.001
hist(data$lat_range,breaks = 50)
min(data$lat_range,breaks = 50)
par(mfrow=c(2,1))
hist(data$lat_range,breaks = 50)
hist(data$min_dist_eq,breaks = 50)
rm(list=ls()); library(permute); library(nlme); library(lme4);library(parallel)
#data0 <- read.csv("~/Documents/Internship/Data/R_working_directory/auto/auto_processed_data.csv", header=T)
data0 <- read.csv("~/Documents/Internship/chalcid_comparative_analysis/Data/R_working_directory/auto/auto_processed_data.csv", header=T)
citat <-read.csv("~/Dropbox/Cyril-Casper_shared/Internship_tidy/Data/auto/auto_citations_per_species.csv", header=T)
data <- merge(x=data0, y=citat, by.x=c("family","genus","species"), by.y=c("family","genus","species"), all=F)
data <- data[!data$nbr_country =="0",] #remove species with no countries described
data <- data[!data$host_spp =="0",] # remove species with no hosts described
data$max_dist_eq <- pmax(abs(data$lat_min),abs(data$lat_max))
mindist <- function(myrow){
Min = as.numeric(myrow[5])
Max = as.numeric(myrow[7])
if((Max*Min) > 0){
min_dist_eq <- pmin(abs(Min),abs(Max))
} else{
min_dist_eq <- 0
}
return(min_dist_eq)
}
data$lat_range <- abs(data$lat_max-data$lat_min)
data$lat_range[data$lat_range == 0] <- 0.001
tmp_mindist<- apply(data,MARGIN = 1,FUN = mindist)
data$min_dist_eq <- unname(tmp_mindist)
hist(data$lat_range)
hist(data$lat_range,breaks=30)
hist(data$lat_range,breaks=50)
test_zero <- data.frame(mindist=rep(0,21),range = rep(0,21))
test_zero <- data.frame(mindist=rep(0,21),range = rep(0,21))
for(cu in 0:20){
tmp <- data[data$ref>cu,] # remove species very few studies
test_zero$mindist[cu] <-unname(apply(data,MARGIN = 1, FUN = mindlist))
test_zero$range[cu] <- abs(tmp$lat_max-tmp$lat_min)
}
test_zero <- data.frame(mindist=rep(0,21),range = rep(0,21))
for(cu in 0:20){
tmp <- data[data$ref>cu,] # remove species very few studies
test_zero$mindist[cu] <-unname(apply(data,MARGIN = 1, FUN = mindist))
test_zero$range[cu] <- abs(tmp$lat_max-tmp$lat_min)
}
warnings()
test_zero <- data.frame(mindist=rep(0,21),range = rep(0,21))
for(cu in 0:20){
tmp <- data[data$ref>cu,] # remove species very few studies
tmp_dist <- unname(apply(data,MARGIN = 1, FUN = mindist))
test_zero$mindist[cu] <- length(tmp_dist[tmp_dist==0])/length(tmp_dist)
tmp_range <- abs(tmp$lat_max-tmp$lat_min)
test_zero$range[cu] <- length(tmp_dist[tmp_range==0])/length(tmp_range)
}
test_zero
barplot(test_zero)
barplot(test_zero$mindist)
barplot(rownames(test_zero),test_zero$mindist)
barplot(test_zero$mindist)
barplot(test_zero$range)
barplot(test_zero$range,names=0:21)
barplot(test_zero$range,names=0:20)
test_zero <- data.frame(mindist=rep(0,21),range = rep(0,21))
for(cu in 0:20){
tmp <- data[data$ref>cu,] # remove species very few studies
tmp_dist <- unname(apply(data,MARGIN = 1, FUN = mindist))
test_zero$mindist[cu+1] <- length(tmp_dist[tmp_dist==0])/length(tmp_dist)
tmp_range <- abs(tmp$lat_max-tmp$lat_min)
test_zero$range[cu+1] <- length(tmp_dist[tmp_range==0])/length(tmp_range)
}
par(mfrow=c(1,2))
barplot(test_zero$mindist,names=0:20,main="Proportion of zero min dist to eq vs ref cutoff")
barplot(test_zero$range,names=0:20,main="Proportion of zero lat range to eq vs ref cutoff")
length(data$min_dist_eq[data$min_dist_eq==0]
)
length(data$min_dist_eq[data$min_dist_eq==0])/length(data$min_dist_eq)
test_zero <- data.frame(mindist=rep(0,31),range = rep(0,31))
for(cu in 0:30){
tmp <- data[data$ref>cu,] # remove species very few studies
tmp_dist <- unname(apply(data,MARGIN = 1, FUN = mindist))
test_zero$mindist[cu+1] <- length(tmp_dist[tmp_dist==0])/length(tmp_dist)
tmp_range <- abs(tmp$lat_max-tmp$lat_min)
test_zero$range[cu+1] <- length(tmp_dist[tmp_range==0])/length(tmp_range)
}
par(mfrow=c(1,2))
barplot(test_zero$mindist,names=0:20,main="Proportion of zero min dist to eq vs ref cutoff")
barplot(test_zero$range,names=0:20,main="Proportion of zero lat range to eq vs ref cutoff")
barplot(test_zero$mindist,names=0:30,main="Proportion of zero min dist to eq vs ref cutoff")
barplot(test_zero$range,names=0:30,main="Proportion of zero lat range to eq vs ref cutoff")
test_zero <- data.frame(mindist=rep(0,31),range = rep(0,31))
for(cu in 0:30){
tmp <- data[data$ref>cu,] # remove species very few studies
tmp_dist <- unname(apply(tmp,MARGIN = 1, FUN = mindist))
test_zero$mindist[cu+1] <- length(tmp_dist[tmp_dist==0])/length(tmp_dist)
tmp_range <- abs(tmp$lat_max-tmp$lat_min)
test_zero$range[cu+1] <- length(tmp_dist[tmp_range==0])/length(tmp_range)
}
par(mfrow=c(1,2))
barplot(test_zero$mindist,names=0:30,main="Proportion of zero min dist to eq vs ref cutoff")
barplot(test_zero$range,names=0:30,main="Proportion of zero lat range to eq vs ref cutoff")
barplot(test_zero$mindist,names=0:30,main="Proportion of zero: \nMinimum distance to equator",xlab="References cutoff")
barplot(test_zero$range,names=0:30,main="Proportion of zero: \nLatitude range",xlab="References cutoff")
test_zero$mindist[1]
test_zero$mindist[2]
rm(list=ls()); library(permute); library(nlme); library(lme4);library(parallel)
#data0 <- read.csv("~/Documents/Internship/Data/R_working_directory/auto/auto_processed_data.csv", header=T)
data0 <- read.csv("~/Documents/Internship/chalcid_comparative_analysis/Data/R_working_directory/auto/auto_processed_data.csv", header=T)
citat <-read.csv("~/Dropbox/Cyril-Casper_shared/Internship_tidy/Data/auto/auto_citations_per_species.csv", header=T)
data <- merge(x=data0, y=citat, by.x=c("family","genus","species"), by.y=c("family","genus","species"), all=F)
data <- data[!data$nbr_country =="0",] #remove species with no countries described
data <- data[!data$host_spp =="0",] # remove species with no hosts described
data2 <- data[data$ref>2,] # remove species very few studies
data<-data2
data$max_dist_eq <- pmax(abs(data$lat_min),abs(data$lat_max))
data <- data[(data$lat_max*data$lat_min)>0,]
data$hemi <- rep(0,nrow(data))
data$hemi[data$lat_min > 0] <- "N"
data$hemi[data$lat_max < 0] <- "S"
View(data)
